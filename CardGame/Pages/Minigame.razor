@page "/minigame"
@using CardGame.Data
@using Domain
@using ServiceContracts
@using Services
@inject IServiceManager _services
<span>User</span>
<input type="text" @bind-value=Player.Name/>

<div> @Player.Name</div>

<h1 class="text-primary">Minigame</h1>
<h3 class="text-warning">Remaining cards: @CardStack.Cards.Count()</h3>

<h3 class="text-danger">Used cards: @CardStack.UsedCards.Count()</h3>

<button class="btn btn-primary" @onclick="ReplaceCheckedCards">Draw new cards</button>



@if (Deck is not null)
{
    <Deck MinigameCards=@Deck></Deck>
}


@code {
    public List<MinigameCardHolder> Deck { get; set; } = new List<MinigameCardHolder>();

    public BlazorPlayer Player = new BlazorPlayer();

    public MinigameCardStack CardStack { get; set; }

    private readonly int _card_count = 5;

    protected override async Task OnInitializedAsync()
    {
        CardStack = new MinigameCardStack(_services);
        CardStack.GenerateStack();
        CardStack.Shuffle();

        InsertCardsInDeck(CardStack.Take(_card_count));
        StateHasChanged();
    }

    private void ReplaceCheckedCards()
    {
        var cardsToReplace = new List<MinigameCardHolder>();
        foreach (var card in Deck)
        {
            if (card.IsSelected)
                cardsToReplace.Add(card);
        }
        foreach (var card in cardsToReplace)
        {
            TakeNewCard(card);
        }
    }

    private void TakeNewCard(MinigameCardHolder oldCard)
    {
        if (Deck.Remove(oldCard))
        {
            var newCard = CardStack.Take(1);
            InsertCardsInDeck(newCard);
            CardStack.Used(oldCard.Card);
        }  
    }

    private void InsertCardsInDeck(List<Card> cardsToTakeFrom)
    {
        foreach (var card in cardsToTakeFrom)
        {
            _services.PlayerService.AddCardHistory(Player.Name ?? "Guest", card);
            Deck.Add(new MinigameCardHolder(card));
        }
    }

}
